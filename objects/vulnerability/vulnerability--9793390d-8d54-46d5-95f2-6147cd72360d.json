{
    "type": "bundle",
    "id": "bundle--b5c035f6-ab11-4d51-979f-22d32acc67bf",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--9793390d-8d54-46d5-95f2-6147cd72360d",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-07-30T01:02:42.970519Z",
            "modified": "2024-07-30T01:02:42.970519Z",
            "name": "CVE-2024-42072",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fix may_goto with negative offset.\n\nZac's syzbot crafted a bpf prog that exposed two bugs in may_goto.\nThe 1st bug is the way may_goto is patched. When offset is negative\nit should be patched differently.\nThe 2nd bug is in the verifier:\nwhen current state may_goto_depth is equal to visited state may_goto_depth\nit means there is an actual infinite loop. It's not correct to prune\nexploration of the program at this point.\nNote, that this check doesn't limit the program to only one may_goto insn,\nsince 2nd and any further may_goto will increment may_goto_depth only\nin the queued state pushed for future exploration. The current state\nwill have may_goto_depth == 0 regardless of number of may_goto insns\nand the verifier has to explore the program until bpf_exit.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-42072"
                }
            ]
        }
    ]
}