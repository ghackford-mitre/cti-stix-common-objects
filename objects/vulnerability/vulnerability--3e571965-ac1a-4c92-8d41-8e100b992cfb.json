{
    "type": "bundle",
    "id": "bundle--431f7511-bae9-4279-8288-86d5705d2898",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--3e571965-ac1a-4c92-8d41-8e100b992cfb",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-05-02T01:19:35.370998Z",
            "modified": "2025-05-02T01:19:35.370998Z",
            "name": "CVE-2022-49808",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: dsa: don't leak tagger-owned storage on switch driver unbind\n\nIn the initial commit dc452a471dba (\"net: dsa: introduce tagger-owned\nstorage for private and shared data\"), we had a call to\ntag_ops->disconnect(dst) issued from dsa_tree_free(), which is called at\ntree teardown time.\n\nThere were problems with connecting to a switch tree as a whole, so this\ngot reworked to connecting to individual switches within the tree. In\nthis process, tag_ops->disconnect(ds) was made to be called only from\nswitch.c (cross-chip notifiers emitted as a result of dynamic tag proto\nchanges), but the normal driver teardown code path wasn't replaced with\nanything.\n\nSolve this problem by adding a function that does the opposite of\ndsa_switch_setup_tag_protocol(), which is called from the equivalent\nspot in dsa_switch_teardown(). The positioning here also ensures that we\nwon't have any use-after-free in tagging protocol (*rcv) ops, since the\nteardown sequence is as follows:\n\ndsa_tree_teardown\n-> dsa_tree_teardown_master\n   -> dsa_master_teardown\n      -> unsets master->dsa_ptr, making no further packets match the\n         ETH_P_XDSA packet type handler\n-> dsa_tree_teardown_ports\n   -> dsa_port_teardown\n      -> dsa_slave_destroy\n         -> unregisters DSA net devices, there is even a synchronize_net()\n            in unregister_netdevice_many()\n-> dsa_tree_teardown_switches\n   -> dsa_switch_teardown\n      -> dsa_switch_teardown_tag_protocol\n         -> finally frees the tagger-owned storage",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2022-49808"
                }
            ]
        }
    ]
}