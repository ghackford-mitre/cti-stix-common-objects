{
    "type": "bundle",
    "id": "bundle--db05bcb6-1ea8-4dfb-8fd4-d40e72ecbd14",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--52002344-13e3-4351-8679-edffc6659912",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-10-11T01:10:05.176794Z",
            "modified": "2024-10-11T01:10:05.176794Z",
            "name": "CVE-2024-47164",
            "description": "Gradio is an open-source Python package designed for quick prototyping. This vulnerability relates to the **bypass of directory traversal checks** within the `is_in_or_equal` function. This function, intended to check if a file resides within a given directory, can be bypassed with certain payloads that manipulate file paths using `..` (parent directory) sequences. Attackers could potentially access restricted files if they are able to exploit this flaw, although the difficulty is high. This primarily impacts users relying on Gradioâ€™s blocklist or directory access validation, particularly when handling file uploads. Users are advised to upgrade to `gradio>=5.0` to address this issue. As a workaround, users can manually sanitize and normalize file paths in their Gradio deployment before passing them to the `is_in_or_equal` function. Ensuring that all file paths are properly resolved and absolute can help mitigate the bypass vulnerabilities caused by the improper handling of `..` sequences or malformed paths.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-47164"
                }
            ]
        }
    ]
}