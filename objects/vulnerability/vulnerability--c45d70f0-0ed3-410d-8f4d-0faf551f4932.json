{
    "type": "bundle",
    "id": "bundle--e3980d03-bba9-44c5-a496-92eef1691d1b",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--c45d70f0-0ed3-410d-8f4d-0faf551f4932",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-10-30T01:11:27.461633Z",
            "modified": "2024-10-30T01:11:27.461633Z",
            "name": "CVE-2024-49768",
            "description": "Waitress is a Web Server Gateway Interface server for Python 2 and 3. A remote client may send a request that is exactly recv_bytes (defaults to 8192) long, followed by a secondary request using HTTP pipelining. When request lookahead is disabled (default) we won't read any more requests, and when the first request fails due to a parsing error, we simply close the connection. However when request lookahead is enabled, it is possible to process and receive the first request, start sending the error message back to the client while we read the next request and queue it. This will allow the secondary request to be serviced by the worker thread while the connection should be closed. Waitress 3.0.1 fixes the race condition. As a workaround, disable channel_request_lookahead, this is set to 0 by default disabling this feature.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-49768"
                }
            ]
        }
    ]
}