{
    "type": "bundle",
    "id": "bundle--f66161ac-cbff-4b92-bd36-f412174632a7",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--2da7604a-d6e0-42f0-ad3d-3013f1bba704",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-10-22T01:11:24.716881Z",
            "modified": "2024-10-22T01:11:24.716881Z",
            "name": "CVE-2024-49874",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ni3c: master: svc: Fix use after free vulnerability in svc_i3c_master Driver Due to Race Condition\n\nIn the svc_i3c_master_probe function, &master->hj_work is bound with\nsvc_i3c_master_hj_work, &master->ibi_work is bound with\nsvc_i3c_master_ibi_work. And svc_i3c_master_ibi_work  can start the\nhj_work, svc_i3c_master_irq_handler can start the ibi_work.\n\nIf we remove the module which will call svc_i3c_master_remove to\nmake cleanup, it will free master->base through i3c_master_unregister\nwhile the work mentioned above will be used. The sequence of operations\nthat may lead to a UAF bug is as follows:\n\nCPU0                                         CPU1\n\n                                    | svc_i3c_master_hj_work\nsvc_i3c_master_remove               |\ni3c_master_unregister(&master->base)|\ndevice_unregister(&master->dev)     |\ndevice_release                      |\n//free master->base                 |\n                                    | i3c_master_do_daa(&master->base)\n                                    | //use master->base\n\nFix it by ensuring that the work is canceled before proceeding with the\ncleanup in svc_i3c_master_remove.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-49874"
                }
            ]
        }
    ]
}