{
    "type": "bundle",
    "id": "bundle--2abfd4b4-4f12-41b0-84cd-09c769bd2097",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--10a6d7ca-4841-413c-96c8-7510e5158ec2",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-05-22T00:57:53.93699Z",
            "modified": "2024-05-22T00:57:53.93699Z",
            "name": "CVE-2021-47368",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nenetc: Fix illegal access when reading affinity_hint\n\nirq_set_affinity_hit() stores a reference to the cpumask_t\nparameter in the irq descriptor, and that reference can be\naccessed later from irq_affinity_hint_proc_show(). Since\nthe cpu_mask parameter passed to irq_set_affinity_hit() has\nonly temporary storage (it's on the stack memory), later\naccesses to it are illegal. Thus reads from the corresponding\nprocfs affinity_hint file can result in paging request oops.\n\nThe issue is fixed by the get_cpu_mask() helper, which provides\na permanent storage for the cpumask_t parameter.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2021-47368"
                }
            ]
        }
    ]
}