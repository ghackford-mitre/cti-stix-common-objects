{
    "type": "bundle",
    "id": "bundle--86c6899c-e500-4c1d-a077-3e413d3b87b0",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--e2ba2caf-1e41-4f26-be9f-03ba9b8c2e15",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-09-28T01:09:29.566134Z",
            "modified": "2024-09-28T01:09:29.566134Z",
            "name": "CVE-2024-46839",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nworkqueue: Improve scalability of workqueue watchdog touch\n\nOn a ~2000 CPU powerpc system, hard lockups have been observed in the\nworkqueue code when stop_machine runs (in this case due to CPU hotplug).\nThis is due to lots of CPUs spinning in multi_cpu_stop, calling\ntouch_nmi_watchdog() which ends up calling wq_watchdog_touch().\nwq_watchdog_touch() writes to the global variable wq_watchdog_touched,\nand that can find itself in the same cacheline as other important\nworkqueue data, which slows down operations to the point of lockups.\n\nIn the case of the following abridged trace, worker_pool_idr was in\nthe hot line, causing the lockups to always appear at idr_find.\n\n  watchdog: CPU 1125 self-detected hard LOCKUP @ idr_find\n  Call Trace:\n  get_work_pool\n  __queue_work\n  call_timer_fn\n  run_timer_softirq\n  __do_softirq\n  do_softirq_own_stack\n  irq_exit\n  timer_interrupt\n  decrementer_common_virt\n  * interrupt: 900 (timer) at multi_cpu_stop\n  multi_cpu_stop\n  cpu_stopper_thread\n  smpboot_thread_fn\n  kthread\n\nFix this by having wq_watchdog_touch() only write to the line if the\nlast time a touch was recorded exceeds 1/4 of the watchdog threshold.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-46839"
                }
            ]
        }
    ]
}